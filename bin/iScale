#!/usr/bin/env ruby

require 'rubygems'
require 'rest-client'
require 'json'
require 'yaml'

API_URL = 'https://manage.scalarium.com/api/clouds'
COMMANDS = ['load', 'open', 'cpu', 'execute', 'md5sum', 'deploy', 'instances','rails-console','rails2-console','applications']
### BEGIN Scalarium API handling

def api(uri = '')
  JSON.parse(RestClient.get("#{API_URL}#{uri}", headers))
end

def headers
  {'X-Scalarium-Token' => @token, 'Accept' => 'application/vnd.scalarium-v1+json'}
end

def load_cloud(name)
  @cloud ||= api().detect{|cloud| cloud['name'] == name}
end

def cloud
  @cloud
end

def applications
  @applications ||= JSON.parse(RestClient.get("https://manage.scalarium.com/api/applications", headers))
end

def roles
  @roles ||= api("/#{cloud['id']}/roles")
end

def instances
  @instances ||= api("/#{cloud['id']}/instances").select{|instance| instance['status'] == 'online'}
end

def role_of_instance(instance)
  roles.detect { |r| instance['role_ids'].include? r['id']}
end

def instances_of_role(role)
  instances.select { |i| i['role_ids'].include? role['id'] }.sort{|i1, i2| i1['nickname'] <=> i2['nickname']}
end

def filtered_roles(filter)
  if filter == 'all'
    roles
  else
    roles.select { |role| role['shortname'] == filter }.sort{|r1, r2| r1['shortname'] <=> r2['shortname']}
  end
end

def filtered_instance(filter)
  instances.detect { |i| i['nickname'] == filter }
end
### END Scalarium API handling


### BEGIN base methods

def parse_command_line
  if ARGV.count == 2 && ['roles', 'refresh','instances','applications'].include?(ARGV[1])
    return cloud_name(ARGV[0]), ARGV[1], nil
  elsif ARGV.count == 2 && ARGV[0] == 'deploy'
    return nil, 'deploy', ARGV[1]
  elsif ARGV.count >= 3 && COMMANDS.include?(ARGV[1])
    return cloud_name(ARGV[0]), ARGV[1], ARGV[2..-1]
  else
    abort "Usage 1: #{file_name} <cloud> <command>\n" +
          "  cloud :=   Scalarium cloud name or shortcut defined in .iScale\n" +
          "  command := roles | \n" +
          "             load { <roles> | all } |\n" +
          "             cpu { <roles> | all } |\n" +
          "             open <roles_or_instances>\n" +
          "             execute <role> <command>\n" +
          "             md5sum <role> <file>\n" +
          "             instances\n" +
          "             applications\n" +
          "             rails-console <application> [<deploy_user>] [<deploy_to_path>]\n" +
          "Usage 2: #{file_name} deploy <application>"
  end
end

def cloud_name(shortcut)
  @shortcuts[shortcut] || shortcut
end

def load_config
  config = YAML.load_file "#{ENV['HOME']}/.iScale"
  @username = config['username']
  @token = config['token']
  @shortcuts = config['shortcuts']
  config
end

def abort(message)
  puts message
  exit
end

def home_dir
  File.join(File.expand_path(File.dirname(__FILE__)), "..")
end

def file_name
  File.basename(__FILE__)
end

def collect(role, verbose = false)
  workers = []
  results = {}
  instances = instances_of_role(role)
  instances.each do |instance|
    if verbose # TODO rather ugly, but currently we need two different kind of defaults in case of timeout
      results[instance['nickname']] = {:instance => instance, :output => 'TIMEOUT'}
    else
      results[instance['nickname']] = 'TIMEOUT'
    end
    workers << Thread.new do
      results[instance['nickname']] = yield instance
    end
  end
  collectors = []
  workers.each { |w| collectors << Thread.new { w.join(10) } }
  collectors.each { |c| c.join }
  results
end

def cut(text, length = 60, cut_string = "...")
  if text
    l = length - cut_string.length
    (text.length > length ? text[0...l] + cut_string : text).to_s
  end
end

### END base methods


### BEGIN commands

def list_roles
  roles.sort{|r1, r2| r1['shortname'] <=> r2['shortname']}.each do |role|
    puts "#{role['shortname']}: #{instances_of_role(role).count} instances"
  end
end

def load_for_hosts_of_role(role)
  result = {}
  puts role['shortname']
  outputs = collect(role, verbose = true) do | instance|
    { :instance => instance,
      :output   => `ssh #{@username}@#{instance['dns_name']} \"uptime | sed 's/.*load/load/'\"` }
  end
  outputs.each do |host, hash|
    result[host] = {}
    result[host][:address] = hash[:instance]['dns_name']
    result[host][:output] = hash[:output]
    from = 'load average: '.length
    til = -2
    result[host][:load_1m], result[host][:load_5m], result[host][:load_15m] = hash[:output][from..til].split(', ').map{|load| load.to_f} rescue puts "Error while getting load for #{host}"
  end
  load_total = {}
  load_count = 0
  result.keys.sort.each do |host|
    server = 'ssh -A ' + @username + '@' + result[host][:address] + ' =>'
    puts "#{(host + ':').ljust(14)} #{server.ljust(67)} #{result[host][:output]}" rescue puts("Error while printing #{host}")
    load_count += 1
    [:load_1m, :load_5m, :load_15m].each do |load|
      load_total[load] ||= 0
      if result[host][load]
        load_total[load] += result[host][load]
      end
    end
  end
  puts "#{'total load average:'.rjust(96)} %1.2f, %1.2f, %1.2f" % [load_total[:load_1m] / load_count, load_total[:load_5m] / load_count, load_total[:load_15m] / load_count]
  puts "#{'total load:'.rjust(96)} %1.2f, %1.2f, %1.2f" % [load_total[:load_1m], load_total[:load_5m], load_total[:load_15m]]
end

def cpu_for_hosts_of_role(role)
  result = {}
  puts "#{role['shortname'].ljust(69)} cpu average:  %user   %nice %system %iowait  %steal   %idle"
  outputs = collect(role, verbose = true) do |instance|
    { :instance => instance,
      :output   => `ssh #{@username}@#{instance['dns_name']} \"iostat 3 2 | grep avg-cpu -C1 | tail -1\"`}
  end
  outputs.each do |host, hash|
    result[host] = {}
    result[host][:address] = hash[:instance]['dns_name']
    from = 'avg-cpu: '.length
    til = -1
    result[host][:result] = hash[:output][from..til].split(' ').delete_if{|t| t == ''}.map{|n| n.to_f} rescue puts("Error while getting load for #{host}")
  end
  load_total = []
  load_count = 0
  result.keys.sort.each do |host|
    server = 'ssh -A ' + @username + '@' + result[host][:address] + ' =>'
    puts "#{(host + ':').ljust(14)} #{server.ljust(67)} %6.2f, %6.2f, %6.2f, %6.2f, %6.2f, %6.2f" % \
      [result[host][:result][0], result[host][:result][1], result[host][:result][2], result[host][:result][3], result[host][:result][4], result[host][:result][5]] rescue(puts "Error while printing #{host}")
    load_count += 1
    (0..5).each do |i|
      load_total[i] ||= 0
      if result[host][:result] && result[host][:result][i]
        load_total[i] += result[host][:result][i]
      end
    end
  end
  puts "#{'total cpu average:'.rjust(82)} %6.2f, %6.2f, %6.2f, %6.2f, %6.2f, %6.2f" % \
    [load_total[0] / load_count, load_total[1] / load_count, load_total[2] / load_count, load_total[3] / load_count, load_total[4] / load_count, load_total[5] / load_count]
  puts "#{'total cpu:'.rjust(82)} %6.2f, %6.2f, %6.2f, %6.2f, %6.2f, %6.2f" % \
    [load_total[0], load_total[1], load_total[2], load_total[3], load_total[4], load_total[5]]
end


def run_commands_on_role(role, command)
  results = collect(role) { |instance| `ssh #{@username}@#{instance['dns_name']} \"#{command}\"` }
  results.keys.sort.each do |host|
    puts " #{host} ".center(78, '#')
    puts results[host]
    puts
  end
end

def rails_console(args, rails3=true)
  name = args[0]
  print_status "Looking for app '#{name}'..."
  app = applications.detect{|application| application['slug_name'] == name and application['cluster_id'].to_s == @cloud['id'] }
  abort "Unknown application '#{name}'. Valid applications are #{applications.map{|a|a['slug_name'].inspect}.join(' ')}" unless app
  abort "#{name} is not a rails app!" if app["application_type"] != "rails"
  print_status "Found app '#{app['name']}'"
  role = roles.detect{|r| r["shortname"].to_s == "rails-app"}
  abort "No role 'rails-app' available." unless role
  print_status "Found role #{role['name']}"
  instance = instances.detect { |i| i["role_ids"].include?(role["id"]) and i['status'] == "online" }
  abort "No (running) instance found" unless instance
  print_status "Connecting to instance #{instance['nickname']}..."
  console = "#{name}: rails console on #{instance['nickname']}"
  print_status "Opened new tab '#{console}â€™\n"
  deploy_user = args[1] || "deploy"
  rails_app_path = args[2] ||  "/srv/www/#{app['slug_name']}/current"
  console = rails3 ? "rails c" : "ruby script/console"
  open_tab console, "ssh\ -A\ #{@username}@#{instance['dns_name']}", "cd #{rails_app_path}; sudo -u #{deploy_user} #{console} #{app['rails_env']}"
end

def print_list_of_instances
  list = hash_to_list_view(list_of_instances)
  output = (list.size > 0 ? list : "no instances")
  puts output
end

def print_list_of_applications
  list = hash_to_list_view(list_of_applications)
  output = (list.size > 0 ? list : "no applications")
  puts output
end

def deploy_application(name)
  app = applications.detect{|application| application['name'] == name}
  abort "Unknown application '#{name}'. Valid applications are #{applications.map{|a|a['name'].inspect}.join(' ')}" unless app
  puts RestClient.post("https://manage.scalarium.com/api/applications/#{app['id']}/deploy", JSON.dump(:command => 'deploy'), headers)
end


def check_md5_for_hosts_of_role(role, file)
  outputs = collect(role) { |instance| `ssh #{@username}@#{instance['dns_name']} \"md5sum #{file}\" | sed 's/ .*//'` }
  results = outputs.inject(Hash.new) do |hash, output|
    host, md5 = output
    hash[md5.chomp] ||= []
    hash[md5.chomp] << host
    hash
  end
  results.keys.sort{|m1, m2| results[m2].length <=> results[m1].length}.each do |md5|
    puts "#{(results[md5].length).to_s.rjust(2)}x #{md5}: #{cut(results[md5].sort.join(" "), 80)}"
  end
end
### END commands


#### Begin helpers
def list_of_applications
  clouds = api()
  applications.map do |application|
    cloud = clouds.detect{|c| c['id'] == application['cluster_id']}
    {
      :name             => application["name"].to_s[0..29].ljust(30),
      :slug_name        => application["slug_name"].to_s.ljust(20),
      :application_type => application["application_type"].to_s.ljust(20),
      :cloud            => ("#{cloud['name']} (#{cloud['region']})" rescue "").ljust(40)
    }
  end
end

def list_of_instances
  instances.map do |instance|
    {
      :nickname     => instance["nickname"].to_s[0..19].ljust(20),
      :ip           => instance["ip"].to_s.ljust(20),
      :private_ip   => instance["private_ip"].to_s.ljust(20),
      :status       => instance["status"].to_s.ljust(20),
      :instance_id  => instance["instance_id"].to_s.ljust(12)
    }
  end
end

def hash_to_list_view(hash)
  list_view = ""
  if hash.size > 0
    width = 0
    # generate headline
    hash.first.keys.each do |key|
      key_width = hash.first[key].length.to_i
      list_view << key.to_s.upcase.ljust(key_width)
      width += key_width
    end
    list_view << "\n".ljust(width,"-") + "\n"
    hash.each do |instance|
      instance.each{|k,v| list_view << v }
      list_view << "\n"
    end
  end
  list_view
end

def hash_to_list_view(hash)
  list_view = ""
  if hash.size > 0
    width = 0
    # generate headline
    hash.first.keys.each do |key|
      key_width = hash.first[key].length.to_i
      list_view << key.to_s.upcase.ljust(key_width)
      width += key_width
    end
    list_view << "\n".ljust(width,"-") + "\n"
    hash.each do |instance|
      instance.each{|k,v| list_view << v }
      list_view << "\n"
    end
  end
  list_view
end

def print_status(message)
  print "\r\e[0K#{message}"
  $stdout.flush
end
#### END helpers

### BEGIN window handling

def open_tab(name, cmd_1, cmd2)
  `#{home_dir}/open_iterm_tab.sh "#{name}" "#{cmd_1}" "#{cmd2}"`
end

def open_window()
  puts "opening new window..."
  `#{home_dir}/open_iterm_window.sh`
end

def open_tabs_with_hosts_for_role(role)
  instances_of_role(role).each do |instance|
    open_tab instance['nickname'].upcase, "ssh\ -A\ #{@username}@#{instance['dns_name']}", "sudo -sEH"
  end
end
### END window handling


### BEGIN "MAIN" program

load_config
cloud_shortcut, command, details = parse_command_line
unless command == 'deploy'
  load_cloud cloud_shortcut
  abort "Unknown cloud #{cloud_shortcut.inspect}, use full cloud name or specify a shortcut in .iScale config file." unless cloud
end

case command
when 'roles'
  list_roles
when 'load'
  details.each do |detail|
    if !(roles = filtered_roles(detail)).empty?
      roles.each do |role|
        load_for_hosts_of_role(role)
      end
    else
      abort "Unknown role #{detail.inspect}, use command 'roles' to list all available roles."
    end
  end
when 'open'
  open_window unless details.size == 1 && filtered_roles(details.first).size == 0 # don't open new window if we want connection to a single instance
  details.each do |detail|
    if !(roles = filtered_roles(detail)).empty?
      roles.each do |role|
        open_tabs_with_hosts_for_role(role)
      end
    else
      instance = filtered_instance(detail)
      if instance
        open_tab detail.upcase, "ssh\ -A\ #{@username}@#{instance['dns_name']}", "sudo -sEH"
      else
        abort "Unknown role or host #{detail.inspect}, use command 'roles' to list all available roles."
      end
    end
  end
when 'cpu'
  details.each do |detail|
    if !(roles = filtered_roles(detail)).empty?
      roles.each do |role|
        cpu_for_hosts_of_role(role)
      end
    else
      abort "Unknown role #{detail.inspect}, use command 'roles' to list all available roles."
    end
  end
when 'execute'
  if !(roles = filtered_roles(details.first)).empty?
    run_commands_on_role(roles.first, details[1..-1].join(' '))
  else
    abort "Unknown role #{details.first.inspect}, use command 'roles' to list all available roles."
  end
when 'deploy'
  deploy_application(details)
when 'md5sum'
  # still experimental, use with care
  if !(roles = filtered_roles(details.first)).empty?
    check_md5_for_hosts_of_role(roles.first, details[1..-1].join(' '))
  else
    abort "Unknown role #{details.first.inspect}, use command 'roles' to list all available roles."
  end
when 'instances'
  print_list_of_instances
when 'applications'
  print_list_of_applications
when 'rails-console'
  rails_console(details)
when 'rails2-console'
  rails_console(details,rails3=false)
else
  abort "Unknown command '#{command}'"
end
### END "MAIN" program
